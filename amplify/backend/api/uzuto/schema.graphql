type Guest
    @model
    @auth(
        rules: [
            { allow: public, operations: [read, create, update, delete] }
            { allow: owner, operations: [read, create, delete, update] }
        ]
    ) {
    id: ID!
    name: String
    email: String!
    phoneNumber: String
    address: String
    description: String
    isVerified: Boolean
    isAttending: Boolean
    songName: String
    isRsvp: Boolean
    rsvpTimeStamp: AWSDateTime
    companies: [String]
    attendingEvents: [EventAttendee] @connection(keyName: "byGuest", fields: ["id"])
    restLocation: String
}

type EventAttendee
    @model(queries: null)
    @key(name: "byEvent", fields: ["eventID", "guestID"])
    @key(name: "byGuest", fields: ["guestID", "eventID"])
    @auth(
        rules: [
            { allow: public, operations: [read, create, update] }
            { allow: owner, operations: [read, create, delete, update] }
        ]
    ) {
    id: ID!
    eventID: ID!
    guestID: ID!
    event: Event! @connection(fields: ["eventID"])
    guest: Event! @connection(fields: ["guestID"])
}

type Event
    @model
    @auth(
        rules: [{ allow: public, operations: [read] }, { allow: owner, operations: [read, create, delete, update] }]
    ) {
    id: ID!
    title: String!
    description: String
    venue: String
    attire: String
    time: [AWSDateTime]
    guests: [EventAttendee] @connection(keyName: "byEvent", fields: ["id"])
}

type Image
    @model
    @key(name: "byDescriptions", fields: ["descriptionID", "imageLink"])
    @key(name: "byVenue", fields: ["venueID", "imageLink"])
    @auth(
        rules: [{ allow: public, operations: [read] }, { allow: owner, operations: [read, create, delete, update] }]
    ) {
    id: ID!
    url: String
    imageLink: String
    subTitle: String
    thumbUrl: String
    name: String!
    width: String
    height: String
    type: String
    descriptionID: ID
    venueID: ID
}

type Descriptions
    @model
    @auth(
        rules: [{ allow: public, operations: [read] }, { allow: owner, operations: [read, create, delete, update] }]
    ) {
    id: ID!
    title: String
    context: String
    content: String
    signature: String
    images: [Image] @connection(keyName: "byDescriptions", fields: ["id"])
    imageLocation: String
}

type Venue
    @model
    @auth(
        rules: [{ allow: public, operations: [read] }, { allow: owner, operations: [read, create, delete, update] }]
    ) {
    id: ID!
    title: String
    shortName: String
    context: String
    address: String
    description: String
    image: Image @connection
    defaultLocation: Boolean
}
